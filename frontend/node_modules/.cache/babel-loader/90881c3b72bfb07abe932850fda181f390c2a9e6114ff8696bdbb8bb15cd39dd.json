{"ast":null,"code":"// API Key Test Utility\nimport axios from 'axios';\n\n// Test Firebase configuration\nexport const testFirebaseConfig = () => {\n  const firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n  };\n\n  // Check if all required Firebase config values are present\n  const requiredKeys = ['apiKey', 'authDomain', 'projectId', 'storageBucket', 'messagingSenderId', 'appId'];\n  const missingKeys = requiredKeys.filter(key => !firebaseConfig[key]);\n  return {\n    success: missingKeys.length === 0,\n    message: missingKeys.length === 0 ? 'Firebase configuration is complete' : `Missing Firebase configuration keys: ${missingKeys.join(', ')}`,\n    config: firebaseConfig\n  };\n};\n\n// Test Weather API\nexport const testWeatherAPI = async () => {\n  const weatherApiKey = process.env.REACT_APP_WEATHER_API;\n  if (!weatherApiKey) {\n    return {\n      success: false,\n      message: 'Weather API key is missing'\n    };\n  }\n  try {\n    // Make a direct API call to Tomorrow.io\n    const response = await axios.get('https://api.tomorrow.io/v4/weather/forecast', {\n      params: {\n        location: 'New York',\n        apikey: weatherApiKey\n      }\n    });\n    return {\n      success: true,\n      message: 'Weather API connection successful',\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return {\n      success: false,\n      message: `Weather API error: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message}`,\n      error: error.toString()\n    };\n  }\n};\n\n// Test Foursquare API\nexport const testFoursquareAPI = async () => {\n  const foursquareApiKey = process.env.REACT_APP_FOURSQUARE_API_KEY;\n  if (!foursquareApiKey) {\n    return {\n      success: false,\n      message: 'Foursquare API key is missing'\n    };\n  }\n  try {\n    // Make a direct API call to Foursquare\n    const response = await axios.get('https://api.foursquare.com/v3/places/search', {\n      params: {\n        query: 'coffee',\n        limit: 1\n      },\n      headers: {\n        'Authorization': foursquareApiKey\n      }\n    });\n    return {\n      success: true,\n      message: 'Foursquare API connection successful',\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return {\n      success: false,\n      message: `Foursquare API error: ${((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message}`,\n      error: error.toString()\n    };\n  }\n};\n\n// Test GROQ API\nexport const testGroqAPI = async () => {\n  const groqApiKey = process.env.REACT_APP_GROQ_API_KEY;\n  if (!groqApiKey) {\n    return {\n      success: false,\n      message: 'GROQ API key is missing'\n    };\n  }\n  try {\n    // Make a direct API call to GROQ\n    const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {\n      model: \"llama3-70b-8192\",\n      messages: [{\n        role: \"system\",\n        content: \"You are a helpful assistant.\"\n      }, {\n        role: \"user\",\n        content: \"Hello, can you give me a brief greeting?\"\n      }],\n      max_tokens: 50\n    }, {\n      headers: {\n        'Authorization': `Bearer ${groqApiKey}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    return {\n      success: true,\n      message: 'GROQ API connection successful',\n      data: response.data\n    };\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    return {\n      success: false,\n      message: `GROQ API error: ${((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message}`,\n      error: error.toString()\n    };\n  }\n};\n\n// Run all tests\nexport const runAllTests = async () => {\n  const results = {\n    firebase: testFirebaseConfig(),\n    weather: await testWeatherAPI(),\n    foursquare: await testFoursquareAPI(),\n    groq: await testGroqAPI()\n  };\n  return results;\n};\nexport default runAllTests;","map":{"version":3,"names":["axios","testFirebaseConfig","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","requiredKeys","missingKeys","filter","key","success","length","message","join","config","testWeatherAPI","weatherApiKey","REACT_APP_WEATHER_API","response","get","params","location","apikey","data","error","_error$response","_error$response$data","toString","testFoursquareAPI","foursquareApiKey","REACT_APP_FOURSQUARE_API_KEY","query","limit","headers","_error$response2","_error$response2$data","testGroqAPI","groqApiKey","REACT_APP_GROQ_API_KEY","post","model","messages","role","content","max_tokens","_error$response3","_error$response3$data","runAllTests","results","firebase","weather","foursquare","groq"],"sources":["D:/ChaloChalein/frontend/src/utils/apiKeyTest.js"],"sourcesContent":["// API Key Test Utility\nimport axios from 'axios';\n\n// Test Firebase configuration\nexport const testFirebaseConfig = () => {\n  const firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n  };\n  \n  // Check if all required Firebase config values are present\n  const requiredKeys = ['apiKey', 'authDomain', 'projectId', 'storageBucket', 'messagingSenderId', 'appId'];\n  const missingKeys = requiredKeys.filter(key => !firebaseConfig[key]);\n  \n  return {\n    success: missingKeys.length === 0,\n    message: missingKeys.length === 0 \n      ? 'Firebase configuration is complete' \n      : `Missing Firebase configuration keys: ${missingKeys.join(', ')}`,\n    config: firebaseConfig\n  };\n};\n\n// Test Weather API\nexport const testWeatherAPI = async () => {\n  const weatherApiKey = process.env.REACT_APP_WEATHER_API;\n  if (!weatherApiKey) {\n    return {\n      success: false,\n      message: 'Weather API key is missing'\n    };\n  }\n  \n  try {\n    // Make a direct API call to Tomorrow.io\n    const response = await axios.get('https://api.tomorrow.io/v4/weather/forecast', {\n      params: {\n        location: 'New York',\n        apikey: weatherApiKey\n      }\n    });\n    \n    return {\n      success: true,\n      message: 'Weather API connection successful',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Weather API error: ${error.response?.data?.message || error.message}`,\n      error: error.toString()\n    };\n  }\n};\n\n// Test Foursquare API\nexport const testFoursquareAPI = async () => {\n  const foursquareApiKey = process.env.REACT_APP_FOURSQUARE_API_KEY;\n  if (!foursquareApiKey) {\n    return {\n      success: false,\n      message: 'Foursquare API key is missing'\n    };\n  }\n  \n  try {\n    // Make a direct API call to Foursquare\n    const response = await axios.get('https://api.foursquare.com/v3/places/search', {\n      params: {\n        query: 'coffee',\n        limit: 1\n      },\n      headers: {\n        'Authorization': foursquareApiKey\n      }\n    });\n    \n    return {\n      success: true,\n      message: 'Foursquare API connection successful',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Foursquare API error: ${error.response?.data?.message || error.message}`,\n      error: error.toString()\n    };\n  }\n};\n\n// Test GROQ API\nexport const testGroqAPI = async () => {\n  const groqApiKey = process.env.REACT_APP_GROQ_API_KEY;\n  if (!groqApiKey) {\n    return {\n      success: false,\n      message: 'GROQ API key is missing'\n    };\n  }\n  \n  try {\n    // Make a direct API call to GROQ\n    const response = await axios.post('https://api.groq.com/openai/v1/chat/completions', {\n      model: \"llama3-70b-8192\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"You are a helpful assistant.\"\n        },\n        {\n          role: \"user\",\n          content: \"Hello, can you give me a brief greeting?\"\n        }\n      ],\n      max_tokens: 50\n    }, {\n      headers: {\n        'Authorization': `Bearer ${groqApiKey}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    return {\n      success: true,\n      message: 'GROQ API connection successful',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `GROQ API error: ${error.response?.data?.message || error.message}`,\n      error: error.toString()\n    };\n  }\n};\n\n// Run all tests\nexport const runAllTests = async () => {\n  const results = {\n    firebase: testFirebaseConfig(),\n    weather: await testWeatherAPI(),\n    foursquare: await testFoursquareAPI(),\n    groq: await testGroqAPI()\n  };\n  \n  return results;\n};\n\nexport default runAllTests;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}