{"ast":null,"code":"// Backend API Connection Test Utility\nimport axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n// Test backend connection\nexport const testBackendConnection = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/health`);\n    return {\n      success: true,\n      message: 'Backend connection successful',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Backend connection failed: ${error.message}`,\n      error\n    };\n  }\n};\n\n// Test weather API endpoint\nexport const testWeatherEndpoint = async () => {\n  try {\n    const response = await axios.post(`${API_URL}/weather/test`, {\n      apiKey: process.env.REACT_APP_WEATHER_API\n    });\n    return {\n      success: true,\n      message: 'Weather API endpoint test successful',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Weather API endpoint test failed: ${error.message}`,\n      error\n    };\n  }\n};\n\n// Test Foursquare API endpoint\nexport const testFoursquareEndpoint = async () => {\n  try {\n    const response = await axios.post(`${API_URL}/locations/test`, {\n      apiKey: process.env.REACT_APP_FOURSQUARE_API_KEY\n    });\n    return {\n      success: true,\n      message: 'Foursquare API endpoint test successful',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Foursquare API endpoint test failed: ${error.message}`,\n      error\n    };\n  }\n};\n\n// Test GROQ API endpoint\nexport const testGroqEndpoint = async () => {\n  try {\n    const response = await axios.post(`${API_URL}/itinerary/test`, {\n      apiKey: process.env.REACT_APP_GROQ_API_KEY\n    });\n    return {\n      success: true,\n      message: 'GROQ API endpoint test successful',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `GROQ API endpoint test failed: ${error.message}`,\n      error\n    };\n  }\n};\n\n// Run all backend API tests\nexport const runAllBackendTests = async () => {\n  const results = {\n    backend: await testBackendConnection(),\n    weather: await testWeatherEndpoint(),\n    foursquare: await testFoursquareEndpoint(),\n    groq: await testGroqEndpoint()\n  };\n  return results;\n};\nexport default runAllBackendTests;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","testBackendConnection","response","get","success","message","data","error","testWeatherEndpoint","post","apiKey","REACT_APP_WEATHER_API","testFoursquareEndpoint","REACT_APP_FOURSQUARE_API_KEY","testGroqEndpoint","REACT_APP_GROQ_API_KEY","runAllBackendTests","results","backend","weather","foursquare","groq"],"sources":["D:/ChaloChalein/frontend/src/utils/backendApiTest.js"],"sourcesContent":["// Backend API Connection Test Utility\nimport axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\n// Test backend connection\nexport const testBackendConnection = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/health`);\n    return {\n      success: true,\n      message: 'Backend connection successful',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Backend connection failed: ${error.message}`,\n      error\n    };\n  }\n};\n\n// Test weather API endpoint\nexport const testWeatherEndpoint = async () => {\n  try {\n    const response = await axios.post(`${API_URL}/weather/test`, {\n      apiKey: process.env.REACT_APP_WEATHER_API\n    });\n    return {\n      success: true,\n      message: 'Weather API endpoint test successful',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Weather API endpoint test failed: ${error.message}`,\n      error\n    };\n  }\n};\n\n// Test Foursquare API endpoint\nexport const testFoursquareEndpoint = async () => {\n  try {\n    const response = await axios.post(`${API_URL}/locations/test`, {\n      apiKey: process.env.REACT_APP_FOURSQUARE_API_KEY\n    });\n    return {\n      success: true,\n      message: 'Foursquare API endpoint test successful',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Foursquare API endpoint test failed: ${error.message}`,\n      error\n    };\n  }\n};\n\n// Test GROQ API endpoint\nexport const testGroqEndpoint = async () => {\n  try {\n    const response = await axios.post(`${API_URL}/itinerary/test`, {\n      apiKey: process.env.REACT_APP_GROQ_API_KEY\n    });\n    return {\n      success: true,\n      message: 'GROQ API endpoint test successful',\n      data: response.data\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `GROQ API endpoint test failed: ${error.message}`,\n      error\n    };\n  }\n};\n\n// Run all backend API tests\nexport const runAllBackendTests = async () => {\n  const results = {\n    backend: await testBackendConnection(),\n    weather: await testWeatherEndpoint(),\n    foursquare: await testFoursquareEndpoint(),\n    groq: await testGroqEndpoint()\n  };\n  \n  return results;\n};\n\nexport default runAllBackendTests;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}