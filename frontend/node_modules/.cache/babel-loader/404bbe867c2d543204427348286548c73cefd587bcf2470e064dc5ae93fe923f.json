{"ast":null,"code":"// API Key Test Utility\nimport axios from 'axios';\n\n// Test Firebase configuration\nexport const testFirebaseConfig = () => {\n  const firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n  };\n\n  // Check if all required Firebase config values are present\n  const requiredKeys = ['apiKey', 'authDomain', 'projectId', 'storageBucket', 'messagingSenderId', 'appId'];\n  const missingKeys = requiredKeys.filter(key => !firebaseConfig[key]);\n  return {\n    success: missingKeys.length === 0,\n    message: missingKeys.length === 0 ? 'Firebase configuration is complete' : `Missing Firebase configuration keys: ${missingKeys.join(', ')}`,\n    config: firebaseConfig\n  };\n};\n\n// Test Weather API\nexport const testWeatherAPI = async () => {\n  const weatherApiKey = process.env.REACT_APP_WEATHER_API;\n  if (!weatherApiKey) {\n    return {\n      success: false,\n      message: 'Weather API key is missing'\n    };\n  }\n  try {\n    // This is just a validation of the key existence, not an actual API call\n    return {\n      success: true,\n      message: 'Weather API key is present',\n      key: weatherApiKey\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Error with Weather API: ${error.message}`\n    };\n  }\n};\n\n// Test Foursquare API\nexport const testFoursquareAPI = async () => {\n  const foursquareApiKey = process.env.REACT_APP_FOURSQUARE_API_KEY;\n  if (!foursquareApiKey) {\n    return {\n      success: false,\n      message: 'Foursquare API key is missing'\n    };\n  }\n  try {\n    // This is just a validation of the key existence, not an actual API call\n    return {\n      success: true,\n      message: 'Foursquare API key is present',\n      key: foursquareApiKey\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Error with Foursquare API: ${error.message}`\n    };\n  }\n};\n\n// Test GROQ API\nexport const testGroqAPI = async () => {\n  const groqApiKey = process.env.REACT_APP_GROQ_API_KEY;\n  if (!groqApiKey) {\n    return {\n      success: false,\n      message: 'GROQ API key is missing'\n    };\n  }\n  try {\n    // This is just a validation of the key existence, not an actual API call\n    return {\n      success: true,\n      message: 'GROQ API key is present',\n      key: groqApiKey\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Error with GROQ API: ${error.message}`\n    };\n  }\n};\n\n// Run all tests\nexport const runAllTests = async () => {\n  const results = {\n    firebase: testFirebaseConfig(),\n    weather: await testWeatherAPI(),\n    foursquare: await testFoursquareAPI(),\n    groq: await testGroqAPI()\n  };\n  return results;\n};\nexport default runAllTests;","map":{"version":3,"names":["axios","testFirebaseConfig","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","requiredKeys","missingKeys","filter","key","success","length","message","join","config","testWeatherAPI","weatherApiKey","REACT_APP_WEATHER_API","error","testFoursquareAPI","foursquareApiKey","REACT_APP_FOURSQUARE_API_KEY","testGroqAPI","groqApiKey","REACT_APP_GROQ_API_KEY","runAllTests","results","firebase","weather","foursquare","groq"],"sources":["D:/ChaloChalein/frontend/src/utils/apiKeyTest.js"],"sourcesContent":["// API Key Test Utility\nimport axios from 'axios';\n\n// Test Firebase configuration\nexport const testFirebaseConfig = () => {\n  const firebaseConfig = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n  };\n  \n  // Check if all required Firebase config values are present\n  const requiredKeys = ['apiKey', 'authDomain', 'projectId', 'storageBucket', 'messagingSenderId', 'appId'];\n  const missingKeys = requiredKeys.filter(key => !firebaseConfig[key]);\n  \n  return {\n    success: missingKeys.length === 0,\n    message: missingKeys.length === 0 \n      ? 'Firebase configuration is complete' \n      : `Missing Firebase configuration keys: ${missingKeys.join(', ')}`,\n    config: firebaseConfig\n  };\n};\n\n// Test Weather API\nexport const testWeatherAPI = async () => {\n  const weatherApiKey = process.env.REACT_APP_WEATHER_API;\n  if (!weatherApiKey) {\n    return {\n      success: false,\n      message: 'Weather API key is missing'\n    };\n  }\n  \n  try {\n    // This is just a validation of the key existence, not an actual API call\n    return {\n      success: true,\n      message: 'Weather API key is present',\n      key: weatherApiKey\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Error with Weather API: ${error.message}`\n    };\n  }\n};\n\n// Test Foursquare API\nexport const testFoursquareAPI = async () => {\n  const foursquareApiKey = process.env.REACT_APP_FOURSQUARE_API_KEY;\n  if (!foursquareApiKey) {\n    return {\n      success: false,\n      message: 'Foursquare API key is missing'\n    };\n  }\n  \n  try {\n    // This is just a validation of the key existence, not an actual API call\n    return {\n      success: true,\n      message: 'Foursquare API key is present',\n      key: foursquareApiKey\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Error with Foursquare API: ${error.message}`\n    };\n  }\n};\n\n// Test GROQ API\nexport const testGroqAPI = async () => {\n  const groqApiKey = process.env.REACT_APP_GROQ_API_KEY;\n  if (!groqApiKey) {\n    return {\n      success: false,\n      message: 'GROQ API key is missing'\n    };\n  }\n  \n  try {\n    // This is just a validation of the key existence, not an actual API call\n    return {\n      success: true,\n      message: 'GROQ API key is present',\n      key: groqApiKey\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Error with GROQ API: ${error.message}`\n    };\n  }\n};\n\n// Run all tests\nexport const runAllTests = async () => {\n  const results = {\n    firebase: testFirebaseConfig(),\n    weather: await testWeatherAPI(),\n    foursquare: await testFoursquareAPI(),\n    groq: await testGroqAPI()\n  };\n  \n  return results;\n};\n\nexport default runAllTests;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}